diff --git a/src/client/Client.js b/src/client/Client.js
index 907912860f73a69f4800b02556a339234abd7de6..07d15c973f6d4069b041c2628abf0122d6d761de 100644
--- a/src/client/Client.js
+++ b/src/client/Client.js
@@ -226,7 +226,7 @@ class Client extends BaseClient {
       await this.ws.connect();
       return this.token;
     } catch (error) {
-      this.destroy();
+      await this.destroy();
       throw error;
     }
   }
@@ -242,13 +242,13 @@ class Client extends BaseClient {
 
   /**
    * Logs out, terminates the connection to Discord, and destroys the client.
-   * @returns {void}
+   * @returns {Promise<void>}
    */
-  destroy() {
+  async destroy() {
     super.destroy();
 
     this.sweepers.destroy();
-    this.ws.destroy();
+    await this.ws.destroy();
     this.token = null;
     this.rest.setToken(null);
   }
diff --git a/src/client/websocket/WebSocketManager.js b/src/client/websocket/WebSocketManager.js
index 8e5456d77bb54ea331530dc29c95b0b8dc174a13..a79b7c42806a40f1bfdd2c96f32f7bc9261c9570 100644
--- a/src/client/websocket/WebSocketManager.js
+++ b/src/client/websocket/WebSocketManager.js
@@ -320,12 +320,12 @@ class WebSocketManager extends EventEmitter {
    * Destroys this manager and all its shards.
    * @private
    */
-  destroy() {
+  async destroy() {
     if (this.destroyed) return;
     // TODO: Make a util for getting a stack
     this.debug(`Manager was destroyed. Called by:\n${new Error().stack}`);
     this.destroyed = true;
-    this._ws.destroy({ code: CloseCodes.Normal });
+    await this._ws.destroy({ code: CloseCodes.Normal });
   }
 
   /**
diff --git a/typings/index.d.ts b/typings/index.d.ts
index 78432a371ea86b9a907bc2fa25ec63d3c9077154..4b2a47a2eb2d684105e427e63745e391c3df472c 100644
--- a/typings/index.d.ts
+++ b/typings/index.d.ts
@@ -955,7 +955,7 @@ export class Client<Ready extends boolean = boolean> extends BaseClient {
   public users: UserManager;
   public voice: ClientVoiceManager;
   public ws: WebSocketManager;
-  public destroy(): void;
+  public destroy(): Promise<void>;
   public fetchGuildPreview(guild: GuildResolvable): Promise<GuildPreview>;
   public fetchInvite(invite: InviteResolvable, options?: ClientFetchInviteOptions): Promise<Invite>;
   public fetchGuildTemplate(template: GuildTemplateResolvable): Promise<GuildTemplate>;
@@ -3325,7 +3325,7 @@ export class WebSocketManager extends EventEmitter {
   private debug(message: string, shardId?: number): void;
   private connect(): Promise<void>;
   private broadcast(packet: unknown): void;
-  private destroy(): void;
+  private destroy(): Promise<void>;
   private handlePacket(packet?: unknown, shard?: WebSocketShard): boolean;
   private checkShardsReady(): void;
   private triggerClientReady(): void;